% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rDNA.R
\name{dna_plotHive}
\alias{dna_plotHive}
\title{Produces a hive plot from DNA data}
\usage{
dna_plotHive(x, axis = "type", axis_label = FALSE, axis_colours = "auto",
  custom_colours = character(), edge_weight = TRUE,
  edge_size_range = c(0.2, 2), edge_colour = "grey", edge_alpha = 1,
  node_label = TRUE, label_repel = 0.5, label_lines = FALSE,
  font_size = 9, theme = "graph", truncate = 30, groups = list(),
  threshold = NULL, seed = 12345, show_legend = TRUE, ...)
}
\arguments{
\item{x}{Either a dna_network or a dna_cluster object or a connection to a
DNA database (see \link{dna_connection}).}

\item{axis}{Takes the name of an attribute in DNA or "group" to produce the
axis. The option "group" only makes sense if either a dna_cluster object is
used or if a list of groups is provided in the \code{groups} argument.}

\item{axis_label}{If TRUE, axis labels are plotted at the end of the axis
instead of the legend.}

\item{axis_colours}{There are five options for colouring the axis segments :
(1.) "auto" simply leaves the standard ggplot2 colours; (2.) "identity"
tries to use the names of variables as colours (i.e., if you set axis =
"color") but fails if names are not plottable colours; (3) "manual" let's
you provide colours via custom_colours; (4.) "brewer" automatically selects
nice colours from a \code{RColorBrewer} palette (palettes can be set in
custom_colours, defaults to \code{Set3}); and (5.) "single" uses the first
value in custom_colours for all nodes.}

\item{custom_colours}{Either provide enough colours to manually set the
colours in the plot (if colours = "manual") or select a palette from
\code{RColorBrewer} (if colours = "brewer").}

\item{edge_weight}{If TRUE, edge weights will be used to determine width of
the lines between nodes. The minimum and maximum width can be controlled
with \code{edge_size_range}.}

\item{edge_size_range}{Takes a numeric vector with two values: minimum and
maximum \code{edge_weight}.}

\item{edge_colour}{What colour to use for edges.}

\item{edge_alpha}{Values lower than 1 make the edges transparent.}

\item{node_label}{If TRUE, text is added next to nodes to label them. If
"label", a rectangle is drawn underneath the text, often making it easier
to read.}

\item{label_repel}{Controls how far from the labels will be put from nodes.
The exact position of nodes is random but overplotting is avoided.}

\item{label_lines}{If TRUE, draws lines between nodes and labels if labels
are further away from nodes.}

\item{font_size}{Control the font size of the node labels.}

\item{theme}{See themes in \code{ggplot2}. Available options are "graph"
(which is customised to look best with networks), "bw", "void", "light" and
"dark". Leave empty to use standard ggplot theme. Customise the theme by
adding \code{+ theme_*} after this function.}

\item{truncate}{Sets the number of characters to which labels should be
truncated.}

\item{groups}{Takes a named list with values as names and group assignments
as values.}

\item{threshold}{Minimum threshold for which edges should be plotted.}

\item{seed}{Set seed to reproduce the layout.}

\item{show_legend}{Logical. Should a legend be displayed.}

\item{...}{Only active when plotting from a dna_connection. Arguments are
passed to \link{dna_network}. Especially useful for normalisation of
networks.}
}
\description{
Produces a hive plot from various objects containing DNA data
}
\details{
This function is a convenience wrapper to make hive plots  with
\link[ggraph]{ggraph} from several types of objects created in rDNA.
Specifically, onemode networks from \link{dna_network}, dna_cluster objects
created with \link{dna_cluster} and connections to a database
(\link{dna_connection}) are supported. The \code{...} are inactive, except
when plotting directly from a dna_connection. In this case, additional
arguments can be passed to network construction via \link{dna_network}.
}
\examples{
\dontrun{
dna_downloadJar()
dna_init()
conn <- dna_connection(dna_sample())

# Plot from onemode network
nw <- dna_network(conn, networkType = "onemode")
dna_plotHive(nw)

# Plot from dna_cluster
clust <- dna_cluster(conn)
dna_plotHive(clust, axis = "group")

# Plot from dna_connection
dna_plotHive(conn, threshold = 0.3, networkType = "onemode",
             normalization ="Jaccard")
}

}
